# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
   # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
        name: Destroy environment
        # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
        # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
        when: on_fail
        command: |
            aws cloudformation delete-stack --stack-name adeleyeStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  create_infrastructure:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: amazon/aws-cli
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name adeleyeStack-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-east-1
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["d6:9a:1a:43:b3:ef:21:5b:e9:af:0f:34:ed:6a:c4:0a"] 
      - run:
          name: Install Ansible
          command: |
              apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
              ansible-playbook -i inventory main-remote.yml
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
              URL="https://bloggers.udacity.com/"  
              # Test if website exists
              if curl -s --head ${URL} 
              then
                return 0
              else
                return 1
              fi   
        - destroy_environment

# Invoke jobs via workflows
workflows:
  create_infrastructure-workflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure
